Collection
    |- - add - - remove - - get
    |
    |------------|------------|------------|
 Objects      Vertices      Timers      Commands
    |
    |
    |------------|------------|
   Cube        Sphere        NURB

=====================================================

Collection
	add			Method
	remove			Method
	get			Method
	type			Property(string)

Object
	Objects			Collection(Object)
	Vertices		Collection(Vertex)
	addObject		Method
	removeObject		Method
	texture			Property(string)
	cx			Property(real)
	cy			Property(real)
	cz			Property(real)
	ax			Property(real)
	ay			Property(real)
	az			Property(real)

Vertex
	x			Property(real)
	y			Property(real)
	z			Property(real)
	tx			Property(real)
	ty			Property(real)
	tz			Property(real)
	r			Property(real)
	g			Property(real)
	b			Property(real)

Texture
	source			Property(string)
	id			Property(integer)

Timer
	interval		Property(real)

Engine
	Objects			Collection(Object)
	Textures		Collection(Texture)
	Timers			Collection(Timer)

Maths
	cos			Method
	sin			Method
	tan			Method
	random			Method
	interp			Method	
	PI			Property(real)


IScriptable
	addSymbols
	getSymbol


==========================================================

statement:

if ( <expression> ) <statement> [ else <statement> ]
foreach <expression> <identifier> <statement>
{ statement }
<expression> .


expression:
<conditional-expression>
<unary-expression> <assignment-operator> <expression>


conditional-expression:
<logical-and-expression> *[ OR <logical-and-expression> ]


logical-and-expression:
<inclusive-or-expression> *[ AND <inclusive-or-expression> ]


inclusive-or-expression: 
<exclusive-or-expression> *[ | <exclusive-or-expression> ]


exclusive-or-expression: 
<and-expression> *[ XOR <and-expression> ]


and-expression: 
<equality-expression> *[ & <equality-expression> ]


equality-expression: 
<relational-expression> *[ == != <relational-expression> ]


relational-expression: 
<additive-expression> *[ < > <= >= <additive-expression> ]


additive-expression:
<multiplicative-expression> *[ + - <multiplicative-expression> ]


multiplicative-expression: 
<unary-expression> *[ * | % <unary-expression> ]


unary-expression:
[ <unary-operator> ] *[ <atom> *[ <postfix-expression> ] ]


<postfix-expression>
<unary-operator> <unary-expression>


postfix-expression:
"[" <expression> "]"
"(" <expression-list> ")"
":"
"++"
"--"


atom:
<name>
<literal>

name:
<identifier>

assignment-operator:
= *= /= += -=


unary-operator:

++
--
+
-
!


expression-list:

<expression> *[ , <expression> ]